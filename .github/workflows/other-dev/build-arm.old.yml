name: Build Linux arm

# Old action from upstream

on:
  push:
    branches: [ none ]
  pull_request:
    branches: [ none ]


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu-18.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -q -y
                apt-get install -q -y git libsdl2-dev cmake gcc g++ make libboost-dev libboost-program-options-dev libboost-system-dev
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which SDL2-devel cmake
                ;;
            esac

          # Produce a binary artifact and place it in the mounted volume
          run: |
            git config --global --add safe.directory /home/runner/work/sQLux/sQLux
            git config --global --add safe.directory /home/runner/work/sQLux/sQLux/CLI11
            git config --global --add safe.directory /home/runner/work/sQLux/sQLux/sdl-gpu
            git submodule init
            git submodule update
            cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX:PATH=${{github.workspace}}/install
            cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
            cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
            tar zcvf /artifacts/sqlux_${{ matrix.arch }}.tgz -C ${{github.workspace}}/install .

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"

      - name: Upload the artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-arm-artifact
          path: "${PWD}/artifacts"
          retention-days: 1
